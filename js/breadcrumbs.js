// Generated by CoffeeScript 1.6.2
(function() {
  $(window).load(function() {
    var a, breadcrumbsObj, crumbPadding, crumbShaderShadowDistance, crumbShaderWidth, crumbWidths, crumbWidthsCombined, crumbsWidth, minCrumbWidth, totalCrumbs, uncollapseAll, updateCrumb, windowResize;

    crumbPadding = 15;
    crumbsWidth = 0;
    a = 1;
    crumbWidthsCombined = [];
    crumbWidthsCombined[0] = 0;
    crumbWidths = [];
    minCrumbWidth = 30;
    crumbShaderWidth = 44;
    crumbShaderShadowDistance = 20;
    breadcrumbsObj = $(".breadcrumbs");
    breadcrumbsObj.find(".crumb").each(function() {
      var crumbWidth, crumbWidthTotal;

      crumbWidth = $(this).width();
      crumbWidthTotal = crumbWidth + crumbPadding * 2;
      crumbWidths[a] = crumbWidthTotal;
      crumbsWidth += crumbWidthTotal;
      crumbWidthsCombined[a] = crumbsWidth;
      return a++;
    });
    totalCrumbs = a - 1;
    updateCrumb = function(currentCrumb) {
      var breadcrumbsWidth, crumbInstance, crumbObj, crumbShaderObj, crumbWidth, crumbWidthsCombinedInstance, currentCrumbWidth, diff, i, nextCrumbObj, shaderPositionRight, totalBeforeCurrentCrumb, totalCombinedCrumbCurrent, totalRestOfTheCrumbs, _i, _j, _ref, _ref1, _ref2;

      totalRestOfTheCrumbs = 0;
      totalCombinedCrumbCurrent = 0;
      breadcrumbsWidth = breadcrumbsObj.width();
      totalCombinedCrumbCurrent = 0;
      for (i = _i = 1, _ref = currentCrumb - 1; _i <= _ref; i = _i += 1) {
        totalCombinedCrumbCurrent += crumbWidths[i];
      }
      for (i = _j = _ref1 = currentCrumb + 1, _ref2 = crumbWidths.length - 1; _j <= _ref2; i = _j += 1) {
        totalRestOfTheCrumbs += crumbWidths[i];
      }
      totalBeforeCurrentCrumb = minCrumbWidth * (currentCrumb - 1);
      currentCrumbWidth = breadcrumbsWidth - totalBeforeCurrentCrumb - totalRestOfTheCrumbs;
      crumbWidthsCombinedInstance = crumbWidthsCombined[crumbWidthsCombined.length - 1] - totalCombinedCrumbCurrent + (minCrumbWidth * (currentCrumb - 1)) + (1 * currentCrumb);
      crumbInstance = crumbWidthsCombined[crumbWidthsCombined.length - 1] + totalCombinedCrumbCurrent - (minCrumbWidth * (currentCrumb - 1));
      crumbObj = breadcrumbsObj.find(".crumb::nth-child(" + currentCrumb + ")");
      nextCrumbObj = breadcrumbsObj.find(".crumb::nth-child(" + (currentCrumb + 1) + ")");
      crumbShaderObj = crumbObj.find(".shader");
      diff = crumbInstance - breadcrumbsWidth;
      crumbWidth = breadcrumbsWidth - totalRestOfTheCrumbs;
      if (crumbWidth < minCrumbWidth) {
        crumbWidth = minCrumbWidth;
      }
      if (breadcrumbsWidth < totalBeforeCurrentCrumb + crumbWidths[currentCrumb] + totalRestOfTheCrumbs) {
        crumbObj.width(currentCrumbWidth);
        shaderPositionRight = (-crumbShaderWidth - crumbShaderShadowDistance) + (crumbWidths[currentCrumb] - currentCrumbWidth);
        if (shaderPositionRight > 0) {
          shaderPositionRight = 0;
        }
        if (Math.abs(shaderPositionRight) < crumbShaderWidth) {
          shaderPositionRight = -crumbShaderWidth;
        }
        crumbShaderObj.css("right", shaderPositionRight);
        if (crumbWidths[currentCrumb + 1]) {
          if (crumbWidths[currentCrumb + 1] > nextCrumbObj.outerWidth()) {
            return crumbObj.width(minCrumbWidth);
          }
        }
      } else {
        crumbObj.width(crumbWidths[currentCrumb]);
        return crumbShaderObj.css("right", -crumbShaderWidth + -crumbShaderShadowDistance);
      }
    };
    windowResize = function() {
      var crumb, winWidth, _i, _results;

      winWidth = $(window).width();
      _results = [];
      for (crumb = _i = 1; _i <= totalCrumbs; crumb = _i += 1) {
        _results.push(updateCrumb(crumb));
      }
      return _results;
    };
    uncollapseAll = function() {
      return breadcrumbsObj.find(".crumb").each(function() {
        return $(this).attr("data-crumb", "expand");
      });
    };
    $(window).resize(function() {
      return windowResize();
    });
    windowResize();
    windowResize();
    windowResize();
    windowResize();
    windowResize();
    windowResize();
    windowResize();
    windowResize();
    windowResize();
    windowResize();
    windowResize();
    return windowResize();
  });

}).call(this);
